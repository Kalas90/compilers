package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LPAR = 1;
		static public final short ID = 2;
		static public final short INT = 3;
		static public final short PLUS = 4;
		static public final short MINUS = 5;
		static public final short RPAR = 6;
		static public final short SEMI = 7;
		static public final short INTW = 8;
		static public final short LBR = 9;
		static public final short MUL = 10;
		static public final short DIV = 11;
		static public final short MOD = 12;
		static public final short ASSIGN = 13;
		static public final short COMMENT = 14;
		static public final short COMMA = 15;
		static public final short IF = 16;
		static public final short ELSE = 17;
		static public final short WHILE = 18;
		static public final short RBR = 19;
		static public final short RETURN = 20;
		static public final short EQ = 21;
		static public final short NEQ = 22;
		static public final short GREATER = 23;
		static public final short LESS = 24;
		static public final short GEQ = 25;
		static public final short LEQ = 26;

		static public final String[] NAMES = {
			"EOF",
			"LPAR",
			"ID",
			"INT",
			"PLUS",
			"MINUS",
			"RPAR",
			"SEMI",
			"INTW",
			"LBR",
			"MUL",
			"DIV",
			"MOD",
			"ASSIGN",
			"COMMENT",
			"COMMA",
			"IF",
			"ELSE",
			"WHILE",
			"RBR",
			"RETURN",
			"EQ",
			"NEQ",
			"GREATER",
			"LESS",
			"GEQ",
			"LEQ"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9p5bSTFL54KnhytWoD3joAWD0NKeGrW5tl3XXKBid1XtEZUfV#12nSkZBfnPw8nCJ56eua" +
		"hZHtilO0WAWgAYktulJk7ySxmSEjDVlUSxvvpwxjp1t2oi0hBC1urA4GPrY8FauoQHXN6MA" +
		"HYA3AHZWmCmt2Cm4YCmmpCGYtcOhwLEJscbplAOWHGX0PiGmA6O0fy9gEK6GtHt7ovWcICG" +
		"X8M8WtBhJ5oBN#YvLTO$apBdstvSon$dkKliFmLbbzl#HkZ$cIkFqK4VhD#jxNQhBsSUvbA" +
		"Em6DwZUw#vLdgbQZ025KgHfOZ$Q89viJg$I8Z35ZFrMLPTGJkvSyLfLZr2DL4unw63DMjfb" +
		"b4LR6pBeKQrHlDNgTl4OGYIWsgWwRf1rBi1dhKO8jsC2Tv$0BkupZLoemfzElyf3FStDuMc" +
		"KSiu8x2dC$exZdJEuaYokmCsq$SiRk$XEvzYBExkDtxyz8j7AhkReCtjR8RHnilF$Z5$34e" +
		"El$ktQ7U$4RcwP#cjblG5KgxtyoKbHvrGFZGHrXO2GGCtPXZ0h#8#R4ARSUPjeSlW5s$yAe" +
		"ZdpzKke0RqTavg6Ck3gTTJepKhbpe6alJDbFzhb#Fopff0Hm4cYdMUrXEyyBbjFa0BbCpf1" +
		"MSbjZVdA872P7oH5oJ6ETv3Zd3AW#IOh9ANA2dBNcE4ykg7#ENF9UYnDaTOLS9SsaXJmW3y" +
		"bpyeAqamxobNInJmhjP#sVg7Dqanxr3v8#ybrpaaYg#WxnaJJL6OESaJl7Be$sLhNvQdU8I" +
		"9lN6F4mhqlxd59xqHetf3PFSzkjcD$omsftgyssOj5xe7hFO6jXgLMxK6sTsdgr6wtSeDgd" +
		"SMCqnkdjbl$OydV6vVLwhASfOkIN$9GVj5#C#YwVMVVAU$aaFT8j7#M3T46Bj97MgEAjaRl" +
		"IBCzftn7U7BbFxiWj4xyfzrZVbXjoNQv9Yxp4Fugy8c#DrwajRqpTeOhtLRxAD#cJtvJk$v" +
		"p3jzV5nxVCCHJnbrrCMsBmkxzNldK#yzwvBxuNXSmRopUXWdcLzCFqgsXBsQUKRMKSiuolH" +
		"3bjYFaXnaACZQVr8Z#AmxVMR#7mfUt7RsmEoIK5dAVc3vhl6qG=");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = program_component_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
				}
			},
			new Action() {	// [1] program_component_list = program_component.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final ProgramComponent a = (ProgramComponent) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [2] program_component_list = program_component_list.a program_component.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final ProgramComponent b = (ProgramComponent) _symbol_b.value;
					 return a.add(b);
				}
			},
			Action.RETURN,	// [3] program_component = function_dec
			Action.RETURN,	// [4] program_component = comment
			new Action() {	// [5] function_dec = id_decl.a LPAR param_list.b RPAR compound_stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final CompoundStmt c = (CompoundStmt) _symbol_c.value;
					 return new FunctionDec(a, b, c);
				}
			},
			new Action() {	// [6] comment = COMMENT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Comment();
				}
			},
			new Action() {	// [7] param_list = id_decl.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [8] param_list = param_list.a COMMA id_decl.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final IdDecl b = (IdDecl) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [9] param_list = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			new Action() {	// [10] stmt_list = stmt_list.a stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [11] stmt_list = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			Action.RETURN,	// [12] stmt = if_stmt
			Action.RETURN,	// [13] stmt = while_stmt
			Action.RETURN,	// [14] stmt = function_stmt
			Action.RETURN,	// [15] stmt = return_stmt
			Action.RETURN,	// [16] stmt = assign_stmt
			Action.RETURN,	// [17] stmt = decl_stmt
			new Action() {	// [18] compound_stmt = LBR stmt_list.a RBR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new CompoundStmt(a);
				}
			},
			new Action() {	// [19] function_factor = id_use.a LPAR add_sub_list.b RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new FunctionFactor(a, b);
				}
			},
			new Action() {	// [20] function_stmt = function_factor.a SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final FunctionFactor a = (FunctionFactor) _symbol_a.value;
					 return new FunctionStmt(a);
				}
			},
			new Action() {	// [21] return_stmt = RETURN expr.a SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return new ReturnStmt(a);
				}
			},
			new Action() {	// [22] assign_stmt = id_use.a ASSIGN expr.b SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new AssignStmt(a, b);
				}
			},
			new Action() {	// [23] decl_stmt = id_decl.a opt_assign.b SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Opt b = (Opt) _symbol_b.value;
					 return new DeclStmt(a, b);
				}
			},
			new Action() {	// [24] opt_assign = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Opt();
				}
			},
			new Action() {	// [25] opt_assign = ASSIGN expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return new Opt(a);
				}
			},
			new Action() {	// [26] if_stmt = IF LPAR comp_expr.a RPAR compound_stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					 return new IfStmt(a, b, new CompoundStmt(new List()));
				}
			},
			new Action() {	// [27] if_stmt = IF LPAR comp_expr.a RPAR compound_stmt.b ELSE compound_stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final CompoundStmt c = (CompoundStmt) _symbol_c.value;
					 return new IfStmt(a, b, c);
				}
			},
			new Action() {	// [28] while_stmt = WHILE LPAR comp_expr.a RPAR compound_stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					 return new WhileStmt(a, b);
				}
			},
			new Action() {	// [29] add_sub_list = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [30] add_sub_list = add_sub_list.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [31] add_sub_list = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			new Action() {	// [32] comp_expr = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Equal(a, b);
				}
			},
			new Action() {	// [33] comp_expr = expr.a NEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new NEqual(a, b);
				}
			},
			new Action() {	// [34] comp_expr = expr.a GREATER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Greater(a, b);
				}
			},
			new Action() {	// [35] comp_expr = expr.a LESS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Less(a, b);
				}
			},
			new Action() {	// [36] comp_expr = expr.a GEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GreaterEqual(a, b);
				}
			},
			new Action() {	// [37] comp_expr = expr.a LEQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LessEqual(a, b);
				}
			},
			new Action() {	// [38] expr = expr.a PLUS term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Add(a, b);
				}
			},
			new Action() {	// [39] expr = expr.a MINUS term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Sub(a, b);
				}
			},
			Action.RETURN,	// [40] expr = term
			new Action() {	// [41] term = term.a MUL factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a, b);
				}
			},
			new Action() {	// [42] term = term.a DIV factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Div(a, b);
				}
			},
			new Action() {	// [43] term = term.a MOD factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mod(a, b);
				}
			},
			Action.RETURN,	// [44] term = factor
			Action.RETURN,	// [45] factor = id_use
			Action.RETURN,	// [46] factor = int_use
			RETURN3,	// [47] factor = LPAR expr RPAR; returns 'RPAR' although none is marked
			Action.RETURN,	// [48] factor = function_factor
			new Action() {	// [49] id_use = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new IdUse(id);
				}
			},
			new Action() {	// [50] int_use = INT.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					 return new IntUse(i);
				}
			},
			new Action() {	// [51] id_decl = INTW ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					 return new IdDecl(id);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
