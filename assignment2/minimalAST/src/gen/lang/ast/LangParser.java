package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LPAR = 1;
		static public final short ID = 2;
		static public final short INT = 3;
		static public final short PLUS = 4;
		static public final short MINUS = 5;
		static public final short RPAR = 6;
		static public final short LBR = 7;
		static public final short INTW = 8;
		static public final short SEMI = 9;
		static public final short IF = 10;
		static public final short WHILE = 11;
		static public final short RBR = 12;
		static public final short COMMA = 13;
		static public final short RETURN = 14;
		static public final short MUL = 15;
		static public final short DIV = 16;
		static public final short MOD = 17;
		static public final short ELSE = 18;
		static public final short ASSIGN = 19;
		static public final short EQ = 20;
		static public final short NEQ = 21;
		static public final short GEQ = 22;
		static public final short LEQ = 23;
		static public final short GREATER = 24;
		static public final short LESS = 25;

		static public final String[] NAMES = {
			"EOF",
			"LPAR",
			"ID",
			"INT",
			"PLUS",
			"MINUS",
			"RPAR",
			"LBR",
			"INTW",
			"SEMI",
			"IF",
			"WHILE",
			"RBR",
			"COMMA",
			"RETURN",
			"MUL",
			"DIV",
			"MOD",
			"ELSE",
			"ASSIGN",
			"EQ",
			"NEQ",
			"GEQ",
			"LEQ",
			"GREATER",
			"LESS"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9o5b5bFL34Kn$ztW6460GL4re4PXctOHX11t1KHDrHyyK5zy2Fu3Om#IQ8XSTybKMDyCfe" +
		"OO#AB7y1ztrV4VHVtux#zvNAPpE1jVZsdf$#sfsrw0Pp7F6GXZ6P44KGdCj68oPY89V1XBC" +
		"OX1xbQqOKnYA36fKZ78aTHXteqe0rJCGtJCGCpgR1LNgHHjmnvc2LV6UdGQvNfQAgA8eDUX" +
		"ycW5YLcN84JQN7rfR2KOWwM8md9BBQsWhDvu4UhN72qrOxNv7XJ76##uoqqkTipLUezJZAj" +
		"AjMIowPbrzbQeNrve$j5rwynNlTCu6xoKOWYvfI6OWGGGZbp3X5LPcCksjcZOWl8OkgNQhr" +
		"2wOFKMjnF4lVbPGxLUbxLcy4yata2ReNFKQYxo68MkSmXZpaKK66hB9wqZwFIU8VfZ6IQjL" +
		"IqraHzJZJ0SxR7bRaYmrwGfPHzvIoLBBOsojdgcLSTpoZUgD4zEtTx9g$UezUqCaQqxDglO" +
		"suVklQRbf#xiJWcn9nIUMCXthR5dCFc3eRwL2o7UFJf0DtheRzSSaZvfjr0seYNh3An26aU" +
		"qhZXjyNOlSOUCFOOIIM7oH6oZnmrVLaad#IGMXCxGJhLjAQzXknthRCkmVeRoCQOM1$PH7h" +
		"YZJ6QqwINd2IdJEmisKgsaUDaDzb3phd6dOapLmjfZObb6zkkh8Zqay54#OoIPyJO7cE7ph" +
		"kDymtGRYObBdsJo#zI#t6rUnEiiO9iZudj82l9pl$arshiBbTiDSpTyLjB3iQCwOjfTzj6$" +
		"iXlrj#r$qlNt#ITV97Fyed#H$A1l8Vvv1LvgRsdvB4yakUqRqc$t9Exyapko6sv9K$aeLOz" +
		"aFjoILve$wRSaEjoJQxA5MU#0OpuvA8CiluXF#KlcuryxHRVlSB3$u75$q4A$oaMIIBgxLZ" +
		"4ezzG1VrXF0uXQeluSYFqQ#XNSOuglfHgsYYrKVr$WVulbT0Fq0PeYsbjRB$K47PHbu0oZY" +
		"ca3NBDndzsMUoy");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = program_component_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
				}
			},
			new Action() {	// [1] program_component_list = program_component.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final ProgramComponent a = (ProgramComponent) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [2] program_component_list = program_component_list.a program_component.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final ProgramComponent b = (ProgramComponent) _symbol_b.value;
					 return a.add(b);
				}
			},
			Action.RETURN,	// [3] program_component = function_dec
			new Action() {	// [4] function_dec = id_decl.a LPAR param_list.b RPAR compound_stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final CompoundStmt c = (CompoundStmt) _symbol_c.value;
					 return new FunctionDec(a, b, c);
				}
			},
			new Action() {	// [5] param_list = id_decl.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [6] param_list = param_list.a COMMA id_decl.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final IdDecl b = (IdDecl) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [7] param_list = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			new Action() {	// [8] stmt_list = stmt.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Stmt a = (Stmt) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [9] stmt_list = stmt_list.a stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [10] stmt_list = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			Action.RETURN,	// [11] stmt = compound_stmt
			Action.RETURN,	// [12] stmt = if_stmt
			Action.RETURN,	// [13] stmt = while_stmt
			RETURN2,	// [14] stmt = function_stmt SEMI; returns 'SEMI' although none is marked
			RETURN2,	// [15] stmt = return_stmt SEMI; returns 'SEMI' although none is marked
			RETURN2,	// [16] stmt = assign_stmt SEMI; returns 'SEMI' although none is marked
			new Action() {	// [17] compound_stmt = LBR stmt_list.a RBR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new CompoundStmt(a);
				}
			},
			new Action() {	// [18] function_stmt = id_use.a LPAR add_sub_list.b RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new FunctionStmt(a, b);
				}
			},
			new Action() {	// [19] return_stmt = RETURN add_sub_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new ReturnStmt(a);
				}
			},
			new Action() {	// [20] assign_stmt = id_decl.a ASSIGN add_sub_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new AssignStmt(a, b);
				}
			},
			new Action() {	// [21] if_stmt = IF LPAR comparison.a RPAR compound_stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					 return new IfStmt(a, b, new CompoundStmt(new List()));
				}
			},
			new Action() {	// [22] if_stmt = IF LPAR comparison.a RPAR compound_stmt.b ELSE compound_stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final CompoundStmt c = (CompoundStmt) _symbol_c.value;
					 return new IfStmt(a, b, c);
				}
			},
			new Action() {	// [23] while_stmt = WHILE LPAR comparison.a RPAR compound_stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					 return new WhileStmt(a, b);
				}
			},
			new Action() {	// [24] add_sub_list = add_sub_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [25] add_sub_list = add_sub_list.a COMMA add_sub_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [26] add_sub_list = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			new Action() {	// [27] add_sub_expr = term.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [28] add_sub_expr = add_sub_expr.a operator1 term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [29] term = factor.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Factor a = (Factor) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [30] term = term.a operator2 factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Factor b = (Factor) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [31] factor = id_use.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					 return new IdFactor(a);
				}
			},
			new Action() {	// [32] factor = INT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new IntFactor(a);
				}
			},
			new Action() {	// [33] factor = LPAR add_sub_expr.a RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new CompoundFactor(a);
				}
			},
			new Action() {	// [34] factor = function_stmt.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final FunctionStmt a = (FunctionStmt) _symbol_a.value;
					 return new FunctionFactor(a);
				}
			},
			Action.RETURN,	// [35] operator1 = PLUS
			Action.RETURN,	// [36] operator1 = MINUS
			Action.RETURN,	// [37] operator2 = MUL
			Action.RETURN,	// [38] operator2 = DIV
			Action.RETURN,	// [39] operator2 = MOD
			Action.RETURN,	// [40] operator3 = EQ
			Action.RETURN,	// [41] operator3 = NEQ
			Action.RETURN,	// [42] operator3 = GEQ
			Action.RETURN,	// [43] operator3 = LEQ
			Action.RETURN,	// [44] operator3 = GREATER
			Action.RETURN,	// [45] operator3 = LESS
			new Action() {	// [46] comparison = add_sub_expr.a operator3 add_sub_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new Comparison(a, b);
				}
			},
			new Action() {	// [47] id_use = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new IdUse(id);
				}
			},
			new Action() {	// [48] id_decl = INTW ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					 return new IdDecl(id);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
