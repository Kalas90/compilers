package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LPAR = 1;
		static public final short ID = 2;
		static public final short INT = 3;
		static public final short PLUS = 4;
		static public final short MINUS = 5;
		static public final short RPAR = 6;
		static public final short SEMI = 7;
		static public final short INTW = 8;
		static public final short LBR = 9;
		static public final short MUL = 10;
		static public final short DIV = 11;
		static public final short MOD = 12;
		static public final short ASSIGN = 13;
		static public final short COMMA = 14;
		static public final short EQ = 15;
		static public final short NEQ = 16;
		static public final short GREATER = 17;
		static public final short LESS = 18;
		static public final short GEQ = 19;
		static public final short LEQ = 20;
		static public final short IF = 21;
		static public final short ELSE = 22;
		static public final short WHILE = 23;
		static public final short RBR = 24;
		static public final short RETURN = 25;

		static public final String[] NAMES = {
			"EOF",
			"LPAR",
			"ID",
			"INT",
			"PLUS",
			"MINUS",
			"RPAR",
			"SEMI",
			"INTW",
			"LBR",
			"MUL",
			"DIV",
			"MOD",
			"ASSIGN",
			"COMMA",
			"EQ",
			"NEQ",
			"GREATER",
			"LESS",
			"GEQ",
			"LEQ",
			"IF",
			"ELSE",
			"WHILE",
			"RBR",
			"RETURN"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9obbKjmL4KKXlyxaynCGW8eIT0yI9Zm2WanX82Y8l8GVA4O1UCBDgvSkMBjWWqR5rgbPRb" +
		"mOvMMUnUMArSgRvKtlX04HA880eB0uRkTdZizunsAAk$Kr$$VVRhFxUxRrID5tLgdHrNKY6" +
		"PgWPvrxbxSGergXlhqZ9hqj7EJDKLJTOVkr3HN7xCVbLEzyrargawTMge7j4pBjQB2btFUb" +
		"vB$IJslMMQQ4yGwDAQ2sYfQ5gj1ZsWGNKAq7EaA$3orQ99MgLcF1wtt1Fx#m3yO#8S2$t3W" +
		"LmR#2LRRQbUrYVVNiU9C4kjEtFnuLVQrd#TqtMN7NMo0MAoBq5Tyz6vovDMk5tszH$qQzZu" +
		"iUrCYgztk3TKSSzkb$U8obUZLtCGtQgsTjYkQhJLwIezfezRRJtf9psc3dT8BxCBBpBx3qS" +
		"btw4dS37QaZjqgiX#pd1laAmonXyFiG5mliFA84R7lvSlE3avNIuKFS$utVvxy$HAx6iOAd" +
		"CnYHKk6yrtaZHdEQg5cpbPMpJVZozJgyNzy3#$FiTe2gsrWdykniejNDUBdcMFEkIHMtkM9" +
		"Q1ivvj1ZdgytSlARlAyiqoBnUtAt67ExPSvbAX5nIvHy0tFB4uz$pRYOFF41fnbseOVljla" +
		"DkQS5LiNUrxlWBLW3xK7xQCdNWkSTs0WVmzlm4NpgOvtm6JJ05$0vVEbZU#4JAPhawrTXEq" +
		"o6NV0Lx0lUSn0EURyVZjMOpuTm0gx3AJ0umtiYT1ojHy#XUVG8NC0tGTt4#AZPvxa4ItrRZ" +
		"k8AEiNNfrAqeGMOvljVmxElKRllqmYjAVFROZnLRUzv7V6wd2udqzQNag$VwvjUFmXYAxnk" +
		"ZPMSfuFOzAeyQxrky$fk41kjwll#BUOpvdMJrrUzlkRrzQ1lQRtZLJcsX7NcNH6l7iFJbHA" +
		"$KLNVF25stQx9F$QlNQIyP7$OttR1pjjVTix#JA8duLVdVW3Ed#splQu#xigVuG1yPtjSVR" +
		"TnBkrRssKxROTzOyUeVGz7WPDcX#5GafqpQcUT#zstd4bYltdTxif$xBBTm2nnTzLSHuQRB" +
		"U9cg#TM4aJSJ5btE$KHwwDjFZwDcVJhuCuOejz2$31#4Jh0c07Q1jt$Hvv$a7ftr$SpPe4Z" +
		"o#qVEOhuDBeJ8cxNR434NL0YwxGTkjo$KaQBRmBqnoFw");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = program_component_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
				}
			},
			new Action() {	// [1] program_component_list = program_component.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final ProgramComponent a = (ProgramComponent) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [2] program_component_list = program_component_list.a program_component.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final ProgramComponent b = (ProgramComponent) _symbol_b.value;
					 return a.add(b);
				}
			},
			Action.RETURN,	// [3] program_component = function_dec
			new Action() {	// [4] function_dec = id_decl.a LPAR param_opt.b RPAR compound_stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final CompoundStmt c = (CompoundStmt) _symbol_c.value;
					 return new FunctionDec(a, b, c);
				}
			},
			new Action() {	// [5] param_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			Action.RETURN,	// [6] param_opt = param_list
			new Action() {	// [7] param_list = param_list.a COMMA id_decl.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final IdDecl b = (IdDecl) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [8] param_list = id_decl.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					 return new List(a);
				}
			},
			new Action() {	// [9] stmt_list = stmt_list.a stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [10] stmt_list = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			Action.RETURN,	// [11] stmt = if_stmt
			Action.RETURN,	// [12] stmt = while_stmt
			Action.RETURN,	// [13] stmt = function_stmt
			Action.RETURN,	// [14] stmt = return_stmt
			Action.RETURN,	// [15] stmt = assign_stmt
			Action.RETURN,	// [16] stmt = decl_stmt
			new Action() {	// [17] compound_stmt = LBR stmt_list.a RBR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final List a = (List) _symbol_a.value;
					 return new CompoundStmt(a);
				}
			},
			new Action() {	// [18] function_call = id_use.a LPAR arg_opt.b RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new FunctionCall(a, b);
				}
			},
			new Action() {	// [19] function_stmt = function_call.a SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final FunctionCall a = (FunctionCall) _symbol_a.value;
					 return new FunctionStmt(a);
				}
			},
			new Action() {	// [20] return_stmt = RETURN add_sub.a SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return new ReturnStmt(a);
				}
			},
			new Action() {	// [21] assign_stmt = id_use.a ASSIGN comp_add_sub_expr.b SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdUse a = (IdUse) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new AssignStmt(a, b);
				}
			},
			new Action() {	// [22] decl_stmt = id_decl.a opt_assign.b SEMI
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final IdDecl a = (IdDecl) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Opt b = (Opt) _symbol_b.value;
					 return new DeclStmt(a, b);
				}
			},
			new Action() {	// [23] opt_assign = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Opt();
				}
			},
			new Action() {	// [24] opt_assign = ASSIGN comp_add_sub_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return new Opt(a);
				}
			},
			new Action() {	// [25] if_stmt = IF LPAR comp_expr.a RPAR compound_stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					 return new IfStmt(a, b, new CompoundStmt(new List()));
				}
			},
			new Action() {	// [26] if_stmt = IF LPAR comp_expr.a RPAR compound_stmt.b ELSE compound_stmt.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final CompoundStmt c = (CompoundStmt) _symbol_c.value;
					 return new IfStmt(a, b, c);
				}
			},
			new Action() {	// [27] while_stmt = WHILE LPAR comp_expr.a RPAR compound_stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final CompoundStmt b = (CompoundStmt) _symbol_b.value;
					 return new WhileStmt(a, b);
				}
			},
			new Action() {	// [28] arg_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			Action.RETURN,	// [29] arg_opt = add_sub_list
			new Action() {	// [30] add_sub_list = add_sub.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [31] add_sub_list = add_sub_list.a COMMA add_sub.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return a.add(b);
				}
			},
			Action.RETURN,	// [32] comp_add_sub_expr = comp_expr
			Action.RETURN,	// [33] comp_add_sub_expr = add_sub
			new Action() {	// [34] comp_expr = add_sub.a EQ add_sub.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Equal(a, b);
				}
			},
			new Action() {	// [35] comp_expr = add_sub.a NEQ add_sub.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new NEqual(a, b);
				}
			},
			new Action() {	// [36] comp_expr = add_sub.a GREATER add_sub.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Greater(a, b);
				}
			},
			new Action() {	// [37] comp_expr = add_sub.a LESS add_sub.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Less(a, b);
				}
			},
			new Action() {	// [38] comp_expr = add_sub.a GEQ add_sub.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new GreaterEqual(a, b);
				}
			},
			new Action() {	// [39] comp_expr = add_sub.a LEQ add_sub.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new LessEqual(a, b);
				}
			},
			new Action() {	// [40] add_sub = add_sub.a PLUS term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Add(a, b);
				}
			},
			new Action() {	// [41] add_sub = add_sub.a MINUS term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Sub(a, b);
				}
			},
			Action.RETURN,	// [42] add_sub = term
			new Action() {	// [43] term = term.a MUL factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a, b);
				}
			},
			new Action() {	// [44] term = term.a DIV factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Div(a, b);
				}
			},
			new Action() {	// [45] term = term.a MOD factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mod(a, b);
				}
			},
			Action.RETURN,	// [46] term = factor
			Action.RETURN,	// [47] factor = id_use
			Action.RETURN,	// [48] factor = int_use
			new Action() {	// [49] factor = LPAR add_sub.e RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
				}
			},
			Action.RETURN,	// [50] factor = function_call
			new Action() {	// [51] id_use = ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 1];
					 return new IdUse(id);
				}
			},
			new Action() {	// [52] int_use = INT.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					 return new IntUse(i);
				}
			},
			new Action() {	// [53] id_decl = INTW ID.id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					 return new IdDecl(id);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
