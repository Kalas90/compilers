Program ::= ProgramComponent*;

abstract ProgramComponent;
FunctionDec: ProgramComponent ::= IdDecl Param:IdDecl* Stmt;

abstract Expr;
Comparison: Expr ::= Left:AddSubExpr Right:AddSubExpr;
Arithmetic: Expr ::= AddSubExpr;

abstract AddSubExpr; 
AssociativeExpr: AddSubExpr ::= Term*;
TermExpr: AddSubExpr ::= Term; 

abstract Term;
MultDiv : Term ::= Term Factor;
SimpleTerm : Term ::= Factor;

abstract Factor;
IdFactor : Factor ::= IdUse;
IntFactor : Factor ::= <INT>;
CompoundFactor : Factor ::= AddSubExpr;
FunctionFactor : Factor ::= Stmt;

abstract Stmt;
FunctionStmt : Stmt ::= IdUse IdDecl*;
ReturnStmt : Stmt ::= AddSubExpr*;
CompoundStmt : Stmt ::= Stmt*;
WhileStmt : Stmt ::= Expr Stmt;
IfStmt : Stmt ::= Expr Stmt;
AssignStmt: Stmt ::= IdDecl AddSubExpr*;

Operator1 ::= ;

IdDecl ::= <ID>;
IdUse ::= <ID>;
