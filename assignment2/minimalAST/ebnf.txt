Program -> FunctionDec*
Expr -> AddSubExpr | Comparison
AddSubExpr -> AddSubExpr Operator1 Term | Term
Term -> Term Operator2 Factor | Factor
Factor -> ID | Int | "(" AddSubExpr ")" | FunctionStmt
Operator2 -> "*" | "/" | "%"
Operator1 -> "+" | "-"
Comparison -> AddSubExpr Operator3 AddSubExpr
Operator3 -> "!=" | "==" | ">=" | "<=" | "<" | ">"
FunctionDec -> "int" ID "(" ("()" | "int" ID ("," "int" ID)*) ")" CompoundStmt
Stmt -> CompoundStmt | (FunctionStmt | ReturnStmt | AssignStmt) ";"
CompundStmt -> "{" Stmt* "}"		
ReturnStmt -> "return" AddSubExpr
FunctionStmt -> ID "(" ("()" | AddSubExpr ("," AddSubExpr)*) ")"
AssignStmt -> "int" ID "=" AddSubExpr
IdDecl -> "int" ID ";"
IfStmt -> "if" "(" Comparison ")" CompoundStmt
Int -> [0-9]+
ID -> [A-Z,a-z]+ (Int* | [A-Z,a-z]*)*
WhileStmt -> "while" "(" Comparison ")" CompoundStmt
IfStmt -> "if" "(" Comparison ")" CompoundStmt
