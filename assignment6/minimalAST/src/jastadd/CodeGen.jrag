/**
 * @author jesper.oqvist@cs.lth.se
 */
aspect CodeGen {

	public void Program.genCode(PrintStream out) {
		out.println(".global _start");
		out.println(".data");
		out.println("buf: .skip 1024");
		out.println(".text");
		out.println("_start:");
		out.println("	call main");	
		out.println("	movq $0, %rdi");
		out.println("	movq $60, %rax");
		out.println("	syscall");
		
		for(FunctionDec dec : getFunctionDecList()) {
			dec.genCode(out);	
		}	
		
		helperFunctions(out);
	}

	public void FunctionDec.genCode(PrintStream out) {	
		out.println(getIdDecl().getID() + ":");
		out.println("	pushq %rbp");
		out.println("	movq %rsp, %rbp");
		out.println("	subq $" + numLocals()*8 + ", %rsp");
		getCompoundStmt().genCode(out);
	}

	public void CompoundStmt.genCode(PrintStream out) {
		for(Stmt stmt : getStmtList()){
			stmt.genCode(out);
		} 
	}

	abstract public void Stmt.genCode(PrintStream out);

	public void ReturnStmt.genCode(PrintStream out) {
		getExpr().genEval(out);
		out.println("	movq %rbp, %rsp");
		out.println("	popq %rbp");
		out.println("	ret");
	}
	
	public void FunctionStmt.genCode(PrintStream out){
		getFunctionCall().genEval(out);
	}
	public void WhileStmt.genCode(PrintStream out){
		String label = generateLabel();
		out.println(label + "begin:");
		getExpr().genEval(out);
		((BinExpr) getExpr()).genConditionalJump(out, label + "end");
		getCompoundStmt().genCode(out);
		out.println("	jmp " + label + "begin");
		out.println(label + "end:");	 
	}
	public void IfStmt.genCode(PrintStream out){
	    	String label = generateLabel();
	    	getIf().genEval(out);
	    	((BinExpr) getIf()).genConditionalJump(out, label + "else");
		out.println(label + "then:");
		getThen().genCode(out);
		out.println("	jmp " + label + "end");
		out.println(label + "else:");
		if(hasElse()) {
			getElse().genCode(out);
		}
		out.println(label + "end:");
	}
	public void DeclStmt.genCode(PrintStream out){
		if(hasExpr()) {
			getExpr().genEval(out);
			out.println("	movq %rax, " + getIdDecl().address());
		}
	}
	public void AssignStmt.genCode(PrintStream out){
		getExpr().genEval(out);
		out.println("	movq %rax, " + getIdUse().decl().address());
	}

	/**
 	 * Generate code to evaluate the expression and
 	 * store the result in RAX.
 	 *
 	 * This must be implemented for every subclass of Expr!
 	**/ 
	abstract public void Expr.genEval(PrintStream out);

	public void IntUse.genEval(PrintStream out) {
		out.println("	movq $" + getINT() + ", %rax");
	}

	public void IdUse.genEval(PrintStream out) {
		out.println("	movq " + decl().address() + ", %rax");
	}

	public void FunctionCall.genEval(PrintStream out) {
		for(int i = getNumExpr() - 1; i > -1; i--){
			getExpr(i).genEval(out);
			out.println("	pushq %rax");
		}
		out.println("	call " + getIdUse().getID());
		if(getNumExpr() > 0) {
			out.println("	addq $" + (getNumExpr() * 8) + ", %rsp");
		}
	}

	public void BinExpr.genConditionalJump(PrintStream out, String label) {
		out.println("	cmp %rbx, %rax");		
		out.println("	" + jumpCondition() + " " + label);
		
	} 

	syn String BinExpr.jumpCondition() = "";
	eq Equal.jumpCondition() = "jne";
	eq NEqual.jumpCondition() = "je";
	eq Greater.jumpCondition() = "jle";
	eq Less.jumpCondition() = "jge";
	eq GreaterEqual.jumpCondition() = "jl";
	eq LessEqual.jumpCondition() = "jg";

	
	public void BinExpr.genExprEval(PrintStream out) {
		getLeft().genEval(out);
		out.println("        pushq %rax");
		getRight().genEval(out);
		out.println("        movq %rax, %rbx");
		out.println("        popq %rax");
	}

	public void Mul.genEval(PrintStream out) {
		genExprEval(out);
		out.println("        imulq %rbx, %rax");
	}

	public void Div.genEval(PrintStream out) {
		genExprEval(out);
		out.println("        movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
		out.println("        idivq %rbx");
	}

	public void Add.genEval(PrintStream out) {
		genExprEval(out);
		out.println("	addq %rbx, %rax");
	}
	public void Sub.genEval(PrintStream out) {
		genExprEval(out);
		out.println("	subq %rbx, %rax");
	}
	public void Mod.genEval(PrintStream out) {
		genExprEval(out);
		out.println("	movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
		out.println("	idivq %rbx");
		out.println("	movq %rdx, %rax");
	}
	public void Equal.genEval(PrintStream out) {
		genExprEval(out);
	}
	public void NEqual.genEval(PrintStream out) {
		genExprEval(out);
	}
	public void Greater.genEval(PrintStream out) {
		genExprEval(out);
	}
	public void Less.genEval(PrintStream out) {
		genExprEval(out);
	}
	public void LessEqual.genEval(PrintStream out) {
		genExprEval(out);
	}
	public void GreaterEqual.genEval(PrintStream out) {
		genExprEval(out);
	}
	public void ParExpr.genEval(PrintStream out) {
		getExpr().genEval(out);
	}

	inh String ASTNode.address();	

	eq Program.getChild().address() = "";

	eq DeclStmt.getIdDecl().address() = "-"+(getIdDecl().localIndex()*8)+"(%rbp)";
	
	eq FunctionDec.getParam(int index).address() {
		return (8*(2+index))+"(%rbp)";
	}

	syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

	syn int ASTNode.localIndex() = prevNode().localIndex();
	eq Program.localIndex() = 0;
	eq FunctionDec.localIndex() = 0;
	eq IdDecl.localIndex() {
		if(isVariable() && !isParam()){
			return prevNode().localIndex() + 1;
		}
		return prevNode().localIndex();
	}
	inh ASTNode ASTNode.prevNode();
	eq ASTNode.getChild(int i).prevNode() = prevNode(i);
	syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
	syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;
 	
	inh boolean IdDecl.isParam();
	eq Program.getChild().isParam() = false;
	eq FunctionDec.getParam(int index).isParam() = true;

	public void Program.helperFunctions(PrintStream out) {
	    
		// helper functions
		out.println("# Procedure to read number from stdin");
		out.println("# C signature: long int read(void)");
		out.println("read:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $0, %rdi");
		out.println("        movq $buf, %rsi");
		out.println("        movq $1024, %rdx");
		out.println("        movq $0, %rax");
		out.println("        syscall                 # %rax = sys_read(0, buf, 1024)");
		out.println("        ### convert string to integer:");
		out.println("        ### %rax contains nchar");
		out.println("        ### %rsi contains ptr");
		out.println("        movq $0, %rdx           # sum = 0");
		out.println("atoi_loop:");
		out.println("        cmpq $0, %rax           # while (nchar > 0)");
		out.println("        jle atoi_done           # leave loop if nchar <= 0");
		out.println("        movzbq (%rsi), %rbx     # move byte, and sign extend to qword");
		out.println("        cmpq $0x30, %rbx        # test if < '0'");
		out.println("        jl atoi_done            # character is not numeric");
		out.println("        cmpq $0x39, %rbx        # test if > '9'");
		out.println("        jg atoi_done            # character is not numeric");
		out.println("        imulq $10, %rdx         # multiply sum by 10");
		out.println("        subq $0x30, %rbx        # value of character");
		out.println("        addq %rbx, %rdx         # add to sum");
		out.println("        incq %rsi               # step to next char");
		out.println("        decq %rax               # nchar--");
		out.println("        jmp atoi_loop           # loop back");
		out.println("atoi_done:");
		out.println("        movq %rdx, %rax         # return value in RAX");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("# Procedure to print number to stdout");
		out.println("# C signature: void print(long int)");
		out.println("print:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        ### convert integer to string");
		out.println("        movq 16(%rbp), %rax     # parameter");
		out.println("        movq $(buf+1023), %rsi  # write ptr (start from end of buf)");
		out.println("        movb $0x0a, (%rsi)      # insert newline");
		out.println("        movq $1, %rcx           # string length");
		out.println("itoa_loop:                      # do.. while (at least one iteration)");
		out.println("        movq $10, %rbx");
		out.println("        movq $0, %rdx");
		out.println("        idivq %rbx              # divide rdx:rax by 10");
		out.println("        addb $0x30, %dl         # remainder + '0'");
		out.println("        decq %rsi               # move string pointer");
		out.println("        movb %dl, (%rsi)");
		out.println("        incq %rcx               # increment string length");
		out.println("        cmpq $0, %rax");
		out.println("        jg itoa_loop            # produce more digits");
		out.println("itoa_done:");
		out.println("        movq $1, %rdi");
		out.println("        movq %rcx, %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
		out.println();
		out.println("print_string:");
		out.println("        pushq %rbp");
		out.println("        movq %rsp, %rbp");
		out.println("        movq $1, %rdi");
		out.println("        movq 16(%rbp), %rsi");
		out.println("        movq 24(%rbp), %rdx");
		out.println("        movq $1, %rax");
		out.println("        syscall");
		out.println("        popq %rbp");
		out.println("        ret");
	}


	public String Stmt.generateLabel() {
	        String function = enclosingFunction().getIdDecl().getID();
		String index = stmtIndex();
		function = function.concat("_"+index);
		return function;
	}
	inh FunctionDec Stmt.enclosingFunction();
	/*
	inh String BinExpr.generateLabel();
	eq Stmt.generateLabel(){
		String function = enclosingFunction().getIdDecl().getID();
		String index = stmtIndex();
		function = function.concat("_"+index);
		return function;
	}
	*/
	inh String BinExpr.getStmtType();
	eq IfStmt.getChild().getStmtType() = "if";
	eq WhileStmt.getChild().getStmtType() = "while"; 
}
