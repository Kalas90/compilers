import java.util.HashMap;
import java.util.Map;

aspect NameAnalysis {
	public class SymbolTable {
		private static final SymbolTable BOTTOM = new SymbolTable() {
			@Override
			public boolean declare(String name, int type) {
				throw new UnsupportedOperationException(
						"can not add name to bottom of name stack");
			}
			@Override
			public boolean lookup(String name, int type) {
				return false;
			}
		};

		private final SymbolTable tail;
		private final Map<String, Integer> names = new HashMap<String, Integer>();
		
		public SymbolTable() {
			tail = BOTTOM;
		}

		public SymbolTable(SymbolTable tail) {
			this.tail = tail;
		}

		/**
		 * Attempt to add a new name to the symbol table.
		 * @return true if name was not already declared
		 */
		public boolean declare(String name, int type) {
		       	if(names.containsKey(name)) {
				int tag = names.get(name);
				switch(tag) {
					case 0: // function handle
					     	if(type == 1) {
							if(lookup(name, 0)) return false;
							names.put(name, 2);
							return true;
						}
						return false;
					case 1: // variable id
					     	if(type == 0) {
							names.put(name, 2);
							return true;
						}
					     	return false;
					case 2: // both function handle and variable id
					     	return false;
					default: return false;
				}
			}
			names.put(name, type);
			return true;
		}

		/**
		 * @return true if name has been declared
		 */
		public boolean lookup(String name, int type) {
		        if(names.containsKey(name)) {
		       		if(names.get(name) == type || names.get(name) == 2)
				return true;
			}
			return tail.lookup(name, type);
		}

		/**
		 * Push a new table on the stack.
		 * @return the new top of the stack
		 */
		public SymbolTable push() {
			return new SymbolTable(this);
		}
	}

	/**
	 * @param err where to write error messages
	 */
	public void Program.checkNames(PrintStream err) {
		SymbolTable symbols = new SymbolTable();
		checkNames(err, symbols);
	}

	/**
	 * @param err where to write error messages
	 * @param symbols symbol table
	 */
	public void ASTNode.checkNames(PrintStream err, SymbolTable symbols) {
		for (int i = 0; i < getNumChild(); ++i) {
			getChild(i).checkNames(err, symbols);
		}
	}

	public void FunctionDec.checkNames(PrintStream err, SymbolTable symbols) {
		getIdDecl().checkNames(err, symbols, 0);
		getCompoundStmt().checkNames(err, symbols.push(), getParamList());
	}
		

	public void CompoundStmt.checkNames(PrintStream err, SymbolTable symbols, List<IdDecl> param) {    	  
		for (int i = 0; i < param.getNumChild(); ++i) {
		    	 param.getChild(i).checkNames(err, symbols, 1);
		}
		for (int i = 0; i < getNumStmt(); ++i) {
		    	 getStmt(i).checkNames(err, symbols);
		}
	}

	public void WhileStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getExpr().checkNames(err, symbols, 1);
		getCompoundStmt().checkNames(err, symbols.push(), new List<IdDecl>());
	}

	public void IfStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getIf().checkNames(err, symbols);
		getThen().checkNames(err, symbols.push(), new List<IdDecl>());
		if(hasElse()) {
			getElse().checkNames(err, symbols.push(), new List<IdDecl>());
		}
	}

	public void AssignStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getIdUse().checkNames(err, symbols, 1);
		getExpr().checkNames(err, symbols, 1);
	}

	public void DeclStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getIdDecl().checkNames(err, symbols, 1);
		if(hasExpr())
			getExpr().checkNames(err, symbols, 1);
	}

	public void ReturnStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getExpr().checkNames(err, symbols, 1);
	}
	
	public void FunctionStmt.checkNames(PrintStream err, SymbolTable symbols) {
		getFunctionCall().checkNames(err, symbols);
	}

	public void FunctionCall.checkNames(PrintStream err, SymbolTable symbols, int dummy) {
		getIdUse().checkNames(err, symbols, 0);    	  
		for (int i = 0; i < getNumExpr(); ++i) {
		    	 getExpr(i).checkNames(err, symbols, 1);
		}
	}

	public void Add.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void Sub.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void Mul.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void Div.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void Mod.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void Equal.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void NEqual.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void Greater.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void Less.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void GreaterEqual.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void LessEqual.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getLeft().checkNames(err, symbols, type);
	       getRight().checkNames(err, symbols, type);
	}
	
	public void ParExpr.checkNames(PrintStream err, SymbolTable symbols, int type) {
	       getExpr().checkNames(err, symbols, type);
	}
	
	public void IntUse.checkNames(PrintStream err, SymbolTable symbols, int dummy) {
	       // nada
	}
	
	public void IdDecl.checkNames(PrintStream err, SymbolTable symbols, int type) {
		if (!symbols.declare(getID(), type)) {
			err.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
			err.println();
		}
	}

	public void IdUse.checkNames(PrintStream err, SymbolTable symbols, int type) {
		if (!symbols.lookup(getID(), type)) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}
	}

	public void Expr.checkNames(PrintStream err, SymbolTable symbols, int type) {}

	/**
	 * Helper method
	 * @return line number of this token
	 */
	public int ASTNode.getLine() {
		return getLine(getStart());
	}
}
